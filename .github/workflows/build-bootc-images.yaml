name: Build homeserver bootable container image

on:
  schedule:
    - cron: "0 3 * * 0" # 03:00 UTC Sundays
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
    paths:
      - "Containerfile"
      - "config.toml"
      - "system_files/homeserver/**"
      - "build_files/**"
      - ".github/workflows/build-bootc-images.yaml"
  push:
    branches: [main]
    paths:
      - "Containerfile"
      - "config.toml"
      - "system_files/homeserver/**"
      - "build_files/**"
      - ".github/workflows/build-bootc-images.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_DESC: "${{ github.event.repository.description }}"
  REPO_NAME: "${{ github.event.repository.name }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "latest"
  IMAGE_NAME: homeserver-centos-bootc
  BASE_IMAGE: ghcr.io/${{ github.repository }}/homeserver-centos-bootc:latest
  PR_IMAGE: localhost/homeserver-centos-bootc:latest
  CONTEXT: ./

jobs:
  build-bootc-image:
    name: Build image
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    timeout-minutes: 10
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      tags: ${{ steps.build-image.outputs.tags }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Login to GHCR (prefer GITHUB_TOKEN)
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN || secrets.PAT_RENOVATEBOT }}

      - name: Pull last image for cache (best-effort)
        run: podman pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest || true

      - name: Image metadata (lean tags)
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.REPO_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version={{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Prepare build secrets
        run: |
          umask 077
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" || "${GITHUB_REF}" != "refs/heads/main" ]]; then
            printf '%s' "${{ secrets.GITHUB_TOKEN }}" > /tmp/REGISTRY_TOKEN
            : > /tmp/PINGGY_TOKEN
          else
            printf '%s' "${{ secrets.PAT_RENOVATEBOT }}" > /tmp/REGISTRY_TOKEN
            printf '%s' "${{ secrets.PINGGY_TOKEN }}" > /tmp/PINGGY_TOKEN
          fi
          cp "${HOME}/.docker/config.json" /tmp/creds

      - name: Build image (OCI, pull latest base)
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: ${{ env.CONTEXT }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          layers: true
          oci: true
          build-args: |
            REGISTRY_USERNAME="${{ github.repository_owner }}"
            REGISTRY_URL=ghcr.io
            PINGGY_HOST=${{ vars.PINGGY_HOST }}
          containerfiles: |
            ${{ env.CONTEXT }}/Containerfile
          extra-args: |
            --pull=true
            --secret id=registry_token,src=/tmp/REGISTRY_TOKEN
            --secret id=pinggy_token,src=/tmp/PINGGY_TOKEN
            --secret id=creds,src=/tmp/creds

      # Save PR image as tar so Trivy can scan without pushing
      - name: Save PR image as tar (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: podman save "${{ env.PR_IMAGE }}" | gzip > pr-image.tar.gz

      - name: Upload PR image artifact (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pr-image
          path: pr-image.tar.gz

      # Single base scan → produce JSON + SARIF once, reuse later
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Trivy base scan → JSON
        run: trivy image --quiet --ignore-unfixed --format json --scanners vuln --skip-db-update --skip-java-db-update -o base_trivy.json "${{ env.BASE_IMAGE }}"

      - name: Trivy base scan → SARIF
        run: trivy image --quiet --ignore-unfixed --format sarif --scanners vuln --skip-db-update --skip-java-db-update -o trivy-base.sarif "${{ env.BASE_IMAGE }}"

      - name: Upload Trivy artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: trivy-base
          path: |
            base_trivy.json
            trivy-base.sarif

      - name: Publish base scan summary
        run: |
          {
            echo "### Security Output (base)"
            echo "<details><summary>Click to expand</summary>"
            echo
            echo '```json'
            cat base_trivy.json
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Push to GHCR (non-PR only)
        if: ${{ github.event_name != 'pull_request' }}
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.metadata.outputs.tags }}
          registry: ghcr.io/${{ github.repository }}

  run-on-main:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-bootc-image
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      security-events: write
    steps:
      - name: Download base scan artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: trivy-base
          path: "${{ github.workspace }}"

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: "${{ github.workspace }}/trivy-base.sarif"
          category: trivy

      - name: Upload JSON SBOM-ish (base) as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: base_trivy.json
          path: "${{ github.workspace }}/base_trivy.json"
          retention-days: 20

  run-on-pr:
    runs-on: ubuntu-latest
    needs: build-bootc-image
    if: ${{ github.event_name == 'pull_request' }}
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
      security-events: write
    steps:
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Download PR image + base scan
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: pr-image
          path: "${{ github.workspace }}"

      - name: Download base_trivy.json
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: trivy-base
          path: "${{ github.workspace }}"

      - name: Load PR image (no registry login needed)
        run: podman load -q -i "${{ github.workspace }}/pr-image.tar.gz"

      - name: Inspect base vs PR (local)
        id: meta
        run: |
          set -euo pipefail
          BASE_RAW=$(podman image inspect "${{ env.BASE_IMAGE }}" | jq '.[0]') || BASE_RAW='{}'
          PR_RAW=$(podman image inspect "${{ env.PR_IMAGE }}" | jq '.[0]')
          BASE_DIGEST=$(jq -r '.Digest // empty' <<<"$BASE_RAW")
          PR_DIGEST=$(jq -r '.Digest // empty' <<<"$PR_RAW")
          BASE_CREATED=$(jq -r '.Created // "n/a"' <<<"$BASE_RAW")
          PR_CREATED=$(jq -r '.Created // "n/a"' <<<"$PR_RAW")
          BASE_SIZE=$(jq -r '.Size // 0' <<<"$BASE_RAW")
          PR_SIZE=$(jq -r '.Size // 0' <<<"$PR_RAW")
          BASE_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$BASE_RAW")
          PR_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$PR_RAW")
          BASE_KEYS=$(jq -r '.Labels | keys[]?' <<<"$BASE_RAW" | sort || true)
          PR_KEYS=$(jq -r '.Labels | keys[]?' <<<"$PR_RAW" | sort || true)
          LABELS_CHANGED=$(comm -3 <(printf "%s\n" "$BASE_KEYS") <(printf "%s\n" "$PR_KEYS") | paste -sd, -)
          [[ -z "$LABELS_CHANGED" ]] && LABELS_CHANGED="_none_"
          echo "base_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
          echo "pr_digest=$PR_DIGEST" >> $GITHUB_OUTPUT
          echo "base_created=$BASE_CREATED" >> $GITHUB_OUTPUT
          echo "pr_created=$PR_CREATED" >> $GITHUB_OUTPUT
          echo "base_size=$BASE_SIZE" >> $GITHUB_OUTPUT
          echo "pr_size=$PR_SIZE" >> $GITHUB_OUTPUT
          echo "base_layers=$BASE_LAYERS" >> $GITHUB_OUTPUT
          echo "pr_layers=$PR_LAYERS" >> $GITHUB_OUTPUT
          echo "labels_changed=$LABELS_CHANGED" >> $GITHUB_OUTPUT

      - name: Trivy (PR) → JSON + SARIF
        run: |
          trivy image --quiet --ignore-unfixed --format json  --scanners vuln --skip-db-update --skip-java-db-update -o pr_trivy.json "${{ env.PR_IMAGE }}"
          trivy image --quiet --ignore-unfixed --format sarif --scanners vuln --skip-db-update --skip-java-db-update -o trivy-pr.sarif "${{ env.PR_IMAGE }}"

      - name: Publish Trivy Output to Summary
        run: |
          {
            echo "### Security Output (PR)"
            echo "<details><summary>Click to expand</summary>"
            echo
            echo '```json'
            cat pr_trivy.json
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Build PR diff comment
        id: report
        run: |
          set -euo pipefail
          base_size=${{ steps.meta.outputs.base_size }}
          pr_size=${{ steps.meta.outputs.pr_size }}
          base_h=$(numfmt --to=iec --suffix=B "$base_size")
          pr_h=$(numfmt --to=iec --suffix=B "$pr_size")
          delta=$(( pr_size - base_size )); abs=${delta#-}
          trend=$(numfmt --to=iec --suffix=B "$abs")
          [[ $delta -gt 0 ]] && trend="+${trend}" || [[ $delta -lt 0 ]] && trend="-${trend}" || trend="±0"
          base_set=$(jq -r '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' base_trivy.json | sort || true)
          pr_set=$(jq -r   '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' pr_trivy.json   | sort || true)
          new=$(comm -13 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          fix=$(comm -23 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          new_n=$(printf "%s\n" "$new" | grep -c . || true)
          fix_n=$(printf "%s\n" "$fix" | grep -c . || true)
          new_top=$(printf "%s\n" "$new" | head -n 5 | paste -sd, -)
          [[ -z "$new_top" ]] && new_top="_none_"
          {
            echo "### 🧾 Image diff"
            echo
            echo "**Repo:** ghcr.io/${{ github.repository }}"
            echo "**Base:** \`${{ env.BASE_IMAGE }}\` (digest: ${{ steps.meta.outputs.base_digest || 'n/a' }})"
            echo "**PR:** \`${{ env.PR_IMAGE }}\` (digest: ${{ steps.meta.outputs.pr_digest || 'n/a' }})"
            echo
            echo "- Created: ${{ steps.meta.outputs.base_created }} → ${{ steps.meta.outputs.pr_created }}"
            echo "- Size (compressed): ${base_h} → ${pr_h} (**${trend}**)"
            echo "- Layers: ${{ steps.meta.outputs.base_layers }} → ${{ steps.meta.outputs.pr_layers }}"
            echo "- Labels changed: ${{ steps.meta.outputs.labels_changed }}"
            echo "- Trivy HIGH/CRIT: +${new_n} / -${fix_n} (new: ${new_top})"
          } > comment.md

      - name: Sticky PR comment
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2
        with:
          path: comment.md
          skip_unchanged: true

      - name: Upload PR SARIF to Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: trivy-pr.sarif
          category: trivy

  test:
    runs-on: ubuntu-latest
    needs: build-bootc-image
    if: ${{ github.event_name == 'pull_request' }}
    continue-on-error: false
    timeout-minutes: 15
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    env:
      SSH_USERNAME: runner
      SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5"
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download PR image
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: pr-image
          path: "${{ github.workspace }}"

      - name: Load PR image
        run: sudo podman load -q -i "${{ github.workspace }}/pr-image.tar.gz"

      - name: Install deps (qemu, podman, jq)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends -qq socat qemu-system-x86 qemu-utils podman jq sqlite3

      - name: Generate ephemeral SSH keypair
        id: ssh-key
        run: |
          set -e
          mkdir -p out
          ssh-keygen -t ed25519 -N "" -f out/ci_ssh_key
          echo "PUBKEY=$(cat out/ci_ssh_key.pub)" >> $GITHUB_ENV
          echo "ssh_key=./out/ci_ssh_key" >> $GITHUB_OUTPUT

      - name: Write bootc-image-builder user config (SSH access)
        run: |
          {
            echo '[[customizations.user]]'
            echo "name = \"${{ env.SSH_USERNAME }}\""
            echo 'password = ""'
            echo "key = \"${PUBKEY}\""
            echo 'groups = ["wheel"]'
          } > out/config.toml
          cat out/config.toml

      - name: Configure Podman (overlay driver)
        run: |
          sudo mkdir -p /etc/containers
          printf "[storage]\ndriver = \"overlay\"\nrunroot = \"/run/containers/storage\"\ngraphroot = \"/var/lib/containers/storage\"" | sudo tee /etc/containers/storage.conf
          # workaround https://github.com/containers/podman/issues/21683
          echo "update DBConfig set GraphDriver = 'overlay' where GraphDriver = '';" | sudo sh -c '(cd /var/lib/containers/storage && sqlite3 db.sql)'

      - name: Build Bootable Image
        id: create-vmdk
        env:
          CONFIG_FILE: ./out/config.toml
          IMAGE: ${{ env.PR_IMAGE }}
          BOOTC_IMAGE_BUILDER_IMAGE: quay.io/centos-bootc/bootc-image-builder:latest
          USE_LIBREPO: false
          IMAGE_TYPE: qcow2
          ROOTFS: xfs
        run: |
          set -e
          DESIRED_UID=$(id -u)
          DESIRED_GID=$(id -g)
          mkdir -p ./output
          INPUT_ARGS=$([ "${USE_LIBREPO}" == "true" ] && echo "--use-librepo=True" || echo "--use-librepo=False")
          sudo podman run --rm --privileged --pull=newer --security-opt label=type:unconfined_t \
            -v ${CONFIG_FILE}:/config.toml:ro \
            -v ./output:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            ${BOOTC_IMAGE_BUILDER_IMAGE} \
            --type ${IMAGE_TYPE} --local --chown $DESIRED_UID:$DESIRED_GID ${INPUT_ARGS} $IMAGE
          case "${IMAGE_TYPE}" in
            raw|ami) OUTPUT_DIRECTORY="./output/image" ;;
            iso)     OUTPUT_DIRECTORY="./output/bootiso" ;;
            vhd)     OUTPUT_DIRECTORY="./output/vpc" ;;
            *)       OUTPUT_DIRECTORY="./output/${IMAGE_TYPE}" ;;
          esac
          ISO_PATH=(${OUTPUT_DIRECTORY}/*)
          CHECKSUM=$(sha256sum $ISO_PATH | awk '{print $1}')
          CHECKSUM_PATH=${ISO_PATH}-CHECKSUM
          echo $CHECKSUM > ${CHECKSUM_PATH}
          echo "output_directory=$OUTPUT_DIRECTORY" >> $GITHUB_OUTPUT
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "checksum_path=$CHECKSUM_PATH" >> $GITHUB_OUTPUT
          echo "path=$ISO_PATH" >> $GITHUB_OUTPUT

      - name: Boot QEMU (headless) with SSH forward
        env: 
          DISK: ${{ steps.create-vmdk.outputs.path }}
        run: |
          set -e
          sudo qemu-system-x86_64 -name bootc-vm -enable-kvm -cpu host -m 2G \
            -drive if=virtio,file="${DISK}",format=qcow2 \
            -net nic,model=virtio -net user,hostfwd=tcp::2222-:22 \
            -display none -monitor unix:/tmp/qemu-monitor-sock,server,nowait -daemonize > out/qemu-console.log 2>&1

      - name: Wait for SSH
        env:
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
          SLEEP_SECONDS: 10
          RETRIES: 10
        run: |
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          for _ in $(seq 0 ${RETRIES}); do
            if ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost 'echo -n READY' 2>/dev/null | grep -q READY; then
              echo "SSH is ready! 🎉"; break; fi
            sleep ${SLEEP_SECONDS}
          done
          ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost "sudo bootc status"
          ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost "rpm-ostree status"
          ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost "systemctl is-system-running --wait"

      - name: Basic health checks
        env:
          CORE_SERVICES: "sshd NetworkManager"
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
        run: |
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          cat ./tests/healthcheck.sh | ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost

      - name: Collect logs and stop QEMU
        if: always()
        env:
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
        run: |
          mkdir -p out/journal
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@localhost
