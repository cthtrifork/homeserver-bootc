name: Build bootable container image
on:
  schedule:
    - cron: '0 3 * * 0' # Runs at 03:00, only on Sunday for security patching
  workflow_dispatch:
  pull_request:
    branches: 
      - main
  push:
#    paths:
#      - "Containerfile"
#      - "config.toml"
#      - ".github/workflows/build-bootc-images.yaml"
    branches:
      - main
    paths-ignore:
      - README.md
      - .editorconfig
      - .gitignore
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_DESC: "${{ github.event.repository.description }}"
  #IMAGE_LOGO_URL: "https://raw.githubusercontent.com/astrovm/amyos/main/repo_files/amy-logo-white.png" # Put your own image here for a fancy profile on https://artifacthub.io/!
  #IMAGE_NAME: "${{ github.event.repository.name }}" # output image name, usually same as repo name
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  DEFAULT_TAG: "latest"

jobs:
  build-bootc-image:
    name: Build bootable container image
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: true
      matrix:
        image:
          - IMAGE_NAME: homeserver-centos-bootc
            CONTEXT: ./
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Clone the repository
        uses: actions/checkout@v5

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image
        shell: bash
        run: |
          podman pull ghcr.io/${{ github.repository }}/${{ matrix.image.IMAGE_NAME }}:latest

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like
          # 2022-02-08T15:38:15Z
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=0.1.${{ github.run_number }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ matrix.image.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ matrix.image.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ matrix.image.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ matrix.image.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Use buildah build to create the image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          context: ${{ matrix.image.CONTEXT }}
          image: ${{ matrix.image.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          layers: true
          oci: false
          build-args: |
            REGISTRY_USERNAME="cthtrifork"
            REGISTRY_TOKEN=${{ secrets.PAT_PULL }}
            REGISTRY_URL=ghcr.io
            PINGGY_TOKEN=${{ secrets.PINGGY_TOKEN }}
          containerfiles: |
            ${{ matrix.image.CONTEXT }}/Containerfile

      - name: Push to Container registry
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository }}

      - name: Inspect images (Podman)
        id: meta
        env:
          BASE_IMAGE: ghcr.io/${{ github.repository }}/${{ matrix.image.IMAGE_NAME }}:latest
          PR_IMAGE: localhost/${{ matrix.image.IMAGE_NAME }}:latest
        shell: bash
        run: |
          set -euo pipefail
          BASE_RAW=$(podman image inspect "$BASE_IMAGE" | jq '.[0]')
          PR_RAW=$(podman image inspect "$PR_IMAGE" | jq '.[0]')

          BASE_DIGEST=$(jq -r '.Digest // empty' <<<"$BASE_RAW")
          PR_DIGEST=$(jq -r '.Digest // empty' <<<"$PR_RAW")
          BASE_CREATED=$(jq -r '.Created // "n/a"' <<<"$BASE_RAW")
          PR_CREATED=$(jq -r '.Created // "n/a"' <<<"$PR_RAW")
          BASE_SIZE=$(jq -r '.Size // 0' <<<"$BASE_RAW")
          PR_SIZE=$(jq -r '.Size // 0' <<<"$PR_RAW")
          BASE_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$BASE_RAW")
          PR_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$PR_RAW")

          BASE_KEYS=$(jq -r '.Labels | keys[]?' <<<"$BASE_RAW" | sort || true)
          PR_KEYS=$(jq -r '.Labels | keys[]?' <<<"$PR_RAW" | sort || true)
          LABELS_CHANGED=$(comm -3 <(printf "%s\n" "$BASE_KEYS") <(printf "%s\n" "$PR_KEYS") | paste -sd, -)
          [[ -z "$LABELS_CHANGED" ]] && LABELS_CHANGED="_none_"

          echo "base_image=$BASE_IMAGE" >> $GITHUB_OUTPUT
          echo "pr_image=$PR_IMAGE" >> $GITHUB_OUTPUT
          echo "base_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
          echo "pr_digest=$PR_DIGEST" >> $GITHUB_OUTPUT
          echo "base_created=$BASE_CREATED" >> $GITHUB_OUTPUT
          echo "pr_created=$PR_CREATED" >> $GITHUB_OUTPUT
          echo "base_size=$BASE_SIZE" >> $GITHUB_OUTPUT
          echo "pr_size=$PR_SIZE" >> $GITHUB_OUTPUT
          echo "base_layers=$BASE_LAYERS" >> $GITHUB_OUTPUT
          echo "pr_layers=$PR_LAYERS" >> $GITHUB_OUTPUT
          echo "labels_changed=$LABELS_CHANGED" >> $GITHUB_OUTPUT

      # Save PR image as tar so Trivy can scan without pushing
      - name: Save PR image as tar for Trivy
        env:
          PR_IMAGE: ${{ steps.meta.outputs.pr_image }}
        run: podman save "$PR_IMAGE" -o pr-image.tar

      # Trivy scans via marketplace action (base via image-ref; PR via --input)
      - name: Trivy (base:latest)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.meta.outputs.base_image }}
          format: json
          output: base_trivy.json
          ignore-unfixed: true
          severity: HIGH,CRITICAL

      - name: Trivy (PR)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          input: /github/workspace/pr-image.tar
          format: json
          output: pr_trivy.json
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          
      - name: Build concise report
        id: report
        shell: bash
        run: |
          set -euo pipefail
          base_size=${{ steps.meta.outputs.base_size }}
          pr_size=${{ steps.meta.outputs.pr_size }}
          base_h=$(numfmt --to=iec --suffix=B "$base_size")
          pr_h=$(numfmt --to=iec --suffix=B "$pr_size")
          delta=$(( pr_size - base_size ))
          abs=${delta#-}
          delta_h=$(numfmt --to=iec --suffix=B "$abs")
          if   [[ $delta -gt 0 ]]; then trend="+${delta_h}"
          elif [[ $delta -lt 0 ]]; then trend="-${delta_h}"
          else trend="Â±0"; fi

          base_set=$(jq -r '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' base_trivy.json | sort || true)
          pr_set=$(jq -r   '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' pr_trivy.json   | sort || true)
          new=$(comm -13 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          fix=$(comm -23 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          new_n=$(printf "%s\n" "$new" | grep -c . || true)
          fix_n=$(printf "%s\n" "$fix" | grep -c . || true)
          new_top=$(printf "%s\n" "$new" | head -n 5 | paste -sd, -)
          [[ -z "$new_top" ]] && new_top="_none_"

          cat > comment.md <<EOF
          ### ðŸ§¾ Image diff
          
          **Repo:** ghcr.io/${{ github.repository }}  
          **Base:** \`${{ steps.meta.outputs.base_image##*: }}\` (digest: ${{ steps.meta.outputs.base_digest || 'n/a' }})  
          **PR:** \`${{ steps.meta.outputs.pr_image##*: }}\` (digest: ${{ steps.meta.outputs.pr_digest || 'n/a' }})
          
          - Created: ${{ steps.meta.outputs.base_created }} â†’ ${{ steps.meta.outputs.pr_created }}
          - Size (compressed): ${base_h} â†’ ${pr_h} (**${trend}**)
          - Layers: ${{ steps.meta.outputs.base_layers }} â†’ ${{ steps.meta.outputs.pr_layers }} (**$(( ${{ steps.meta.outputs.pr_layers }} - ${{ steps.meta.outputs.base_layers }} ))**)
          - Labels changed: ${{ steps.meta.outputs.labels_changed }}
          - Trivy HIGH/CRIT: +${new_n} / -${fix_n} (new: ${new_top})
EOF

      - name: Sticky PR comment (update in-place)
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: comment.md







