name: Build homeserver bootable container image
on:
  schedule:
    - cron: "0 3 * * 0" # Runs at 03:00, only on Sunday for security patching
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
    branches:
      - main
    paths:
      - "Containerfile"
      - "config.toml"
      - "system_files/homeserver/**"
      - "build_files/**"
      - ".github/workflows/build-bootc-images.yaml"
  push:
    branches:
      - main
    paths:
      - "Containerfile"
      - "config.toml"
      - "system_files/homeserver/**"
      - "build_files/**"
      - ".github/workflows/build-bootc-images.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_DESC: "${{ github.event.repository.description }}"
  #IMAGE_LOGO_URL: "https://raw.githubusercontent.com/astrovm/amyos/main/repo_files/amy-logo-white.png" # Put your own image here for a fancy profile on https://artifacthub.io/!
  REPO_NAME: "${{ github.event.repository.name }}" # output image name, usually same as repo name
  #IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  DEFAULT_TAG: "latest"
  VERSION: "0.1.${{ github.run_number }}"
  IMAGE_NAME: homeserver-centos-bootc
  IMAGE_FULL: ghcr.io/${{ github.repository }}/homeserver-centos-bootc
  BASE_IMAGE: ghcr.io/${{ github.repository }}/homeserver-centos-bootc:latest
  PR_IMAGE: localhost/homeserver-centos-bootc:0.1.${{ github.run_number }} # this should work when the image has been built
  CONTEXT: ./

jobs:
  build-bootc-image:
    name: Build image
    runs-on: ubuntu-latest
    continue-on-error: false
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    timeout-minutes: 10
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      tags: ${{ steps.build-image.outputs.tags }}
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_RENOVATEBOT }}

      - name: Load image
        shell: bash
        run: |
          podman pull -q ${{ env.BASE_IMAGE }}

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like
          # 2022-02-08T15:38:15Z
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }},enable={{is_default_branch}}
            type=raw,value=${{ env.VERSION }}
            type=raw,enable={{is_default_branch}},value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,enable={{is_default_branch}},value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }},format=long
            type=ref,event=pr
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.REPO_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      # Write secrets to temp files for --secret src=
      - name: Prepare build secrets
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" || "${GITHUB_REF}" != "refs/heads/main" ]]; then
            echo "${{ secrets.GITHUB_TOKEN }}" > /tmp/REGISTRY_TOKEN
            echo "" > /tmp/PINGGY_TOKEN
          else
            echo "${{ secrets.PAT_RENOVATEBOT }}" > /tmp/REGISTRY_TOKEN
            echo "${{ secrets.PINGGY_TOKEN }}" > /tmp/PINGGY_TOKEN
          fi

          cp "${HOME}/.docker/config.json" /tmp/creds
          chmod 600 /tmp/creds
          chmod 600 /tmp/REGISTRY_TOKEN
          chmod 600 /tmp/PINGGY_TOKEN

      - name: Use buildah build to create the image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: ${{ env.CONTEXT }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          layers: true
          oci: false
          build-args: |
            REGISTRY_USERNAME="${{ github.repository_owner }}"
            REGISTRY_URL=ghcr.io
            PINGGY_HOST=${{ vars.PINGGY_HOST }}
          containerfiles: |
            ${{ env.CONTEXT }}/Containerfile
          extra-args: |
            --secret id=registry_token,src=/tmp/REGISTRY_TOKEN
            --secret id=pinggy_token,src=/tmp/PINGGY_TOKEN
            --secret id=creds,src=/tmp/creds

      - name: Save PR image as tar
        run: |
          #podman save --format docker-archive -o app-all-tags.tar $(podman images --format '{{.Repository}}:{{.Tag}}' | grep '^localhost/${{ env.IMAGE_NAME }}:')
          podman save "${{ env.PR_IMAGE }}" > image.tar

      - name: Upload PR image
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-pr-image-${{ github.sha }}
          path: "${{ github.workspace }}/image.tar"

      - name: Trivy REPORT table (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: image.tar
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          format: table
          output: trivy-results.txt
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Trivy vuln scan (JSON)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: image.tar
          format: json
          output: trivy.json
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload trivy json report as a Github artifact
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          path: "${{ github.workspace }}/trivy.json"
    
      - name: Publish Trivy Output to Summary
        run: | #sh
          {
            echo "### Trivy report"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```'
            cat trivy-results.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY

  push-image:
    runs-on: ubuntu-latest
    # only run on main branch or if PR has "push" label
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || contains(github.event.pull_request.labels.*.name, 'push')
    needs: build-bootc-image
    continue-on-error: false
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      attestations: write
    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Download PR image
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/image.tar
          key: ${{ runner.os }}-pr-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Download trivy report
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/trivy.json
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Load images
        shell: bash
        run: | #sh
          set -euo pipefail
          podman load -q -i ${{ github.workspace }}/image.tar
          podman images
          for tag in $TAGS; do
            podman tag "${{ env.PR_IMAGE }}" "${{ env.IMAGE_FULL }}:$tag"
          done
        env:
          TAGS: ${{ needs.build-bootc-image.outputs.tags }}

      - name: Push to Container registry
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ needs.build-bootc-image.outputs.image }}
          tags: ${{ needs.build-bootc-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository }}

      - name: Trivy REPORT (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: "${{ github.workspace }}/trivy-results.sarif"
          category: trivy

      - name: Trivy SBOM (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: image.tar
          scan-type: image
          format: "github"
          output: "dependency-results.sbom.json"
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
          skip-setup-trivy: true
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/dependency-results.sbom.json"
          retention-days: 20 # 90 is the default

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Compose immutable image ref (by digest)
        id: ref
        run: |
          echo "IMAGE_REF=${{ env.IMAGE_FULL }}@${{ steps.push-to-ghcr.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Sign container image
        run: |
          cosign sign --recursive -y --key env://COSIGN_PRIVATE_KEY ${{ steps.ref.outputs.IMAGE_REF }}
          for tag in ${{ needs.build-bootc-image.outputs.tags }}; do
            cosign sign --recursive -y --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_FULL }}:$tag
          done
        env:
          TAGS: ${{ steps.push-to-ghcr.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          COSIGN_PASSWORD: ""

      - name: Attach build provenance attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3
        with:
          subject-name: "${{ env.IMAGE_FULL }}"
          subject-digest: ${{ steps.push-to-ghcr.outputs.digest }}
          push-to-registry: true

      - name: Cosign attest vulnerability results
        run: |
          # Attach the Trivy JSON as an attestation of type "vuln"
          cosign attest \
            --yes \
            --type vuln \
            --predicate trivy.json \
            ${{ steps.ref.outputs.IMAGE_REF }}

      - name: Verify
        run: |
          cosign verify --key ./cosign.pub \
            ${{ env.IMAGE_FULL }}@${{ steps.push-to-ghcr.outputs.digest }}
          cosign public-key --key env://COSIGN_PRIVATE_KEY
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

  run-on-pr:
    runs-on: ubuntu-latest
    needs: build-bootc-image
    if: ${{ github.event_name == 'pull_request' }}
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    steps:
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Download PR image
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/image.tar
          key: ${{ runner.os }}-pr-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Download trivy.json
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/trivy.json
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load images
        shell: bash
        run: | #sh
          podman pull -q ${{ env.BASE_IMAGE }}
          podman load -q -i ${{ github.workspace }}/image.tar
          podman images

      - name: Inspect images (Podman)
        id: meta
        shell: bash
        run: | #sh
          set -euo pipefail

          BASE_RAW=$(podman image inspect "${{ env.BASE_IMAGE }}" | jq '.[0]')
          PR_RAW=$(podman image inspect "${{ env.PR_IMAGE }}" | jq '.[0]')

          BASE_DIGEST=$(jq -r '.Digest // empty' <<<"$BASE_RAW")
          PR_DIGEST=$(jq -r '.Digest // empty' <<<"$PR_RAW")
          BASE_CREATED=$(jq -r '.Created // "n/a"' <<<"$BASE_RAW")
          PR_CREATED=$(jq -r '.Created // "n/a"' <<<"$PR_RAW")
          BASE_SIZE=$(jq -r '.Size // 0' <<<"$BASE_RAW")
          PR_SIZE=$(jq -r '.Size // 0' <<<"$PR_RAW")
          BASE_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$BASE_RAW")
          PR_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$PR_RAW")

          BASE_KEYS=$(jq -r '.Labels | keys[]?' <<<"$BASE_RAW" | sort || true)
          PR_KEYS=$(jq -r '.Labels | keys[]?' <<<"$PR_RAW" | sort || true)
          LABELS_CHANGED=$(comm -3 <(printf "%s\n" "$BASE_KEYS") <(printf "%s\n" "$PR_KEYS") | paste -sd, -)
          [[ -z "$LABELS_CHANGED" ]] && LABELS_CHANGED="_none_"

          echo "base_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
          echo "pr_digest=$PR_DIGEST" >> $GITHUB_OUTPUT
          echo "base_created=$BASE_CREATED" >> $GITHUB_OUTPUT
          echo "pr_created=$PR_CREATED" >> $GITHUB_OUTPUT
          echo "base_size=$BASE_SIZE" >> $GITHUB_OUTPUT
          echo "pr_size=$PR_SIZE" >> $GITHUB_OUTPUT
          echo "base_layers=$BASE_LAYERS" >> $GITHUB_OUTPUT
          echo "pr_layers=$PR_LAYERS" >> $GITHUB_OUTPUT
          echo "labels_changed=$LABELS_CHANGED" >> $GITHUB_OUTPUT

      - name: Trivy (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          format: json
          output: base_trivy.json
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
          
      - name: Build report
        id: report
        shell: bash
        run: | #sh
          set -euo pipefail
          base_size=${{ steps.meta.outputs.base_size }}
          pr_size=${{ steps.meta.outputs.pr_size }}
          base_h=$(numfmt --to=iec --suffix=B "$base_size")
          pr_h=$(numfmt --to=iec --suffix=B "$pr_size")
          delta=$(( pr_size - base_size ))
          abs=${delta#-}
          delta_h=$(numfmt --to=iec --suffix=B "$abs")
          if   [[ $delta -gt 0 ]]; then trend="+${delta_h}"
          elif [[ $delta -lt 0 ]]; then trend="-${delta_h}"
          else trend="±0"; fi

          base_set=$(jq -r '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' base_trivy.json | sort || true)
          pr_set=$(jq -r   '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' trivy.json   | sort || true)
          new=$(comm -13 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          fix=$(comm -23 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          new_n=$(printf "%s\n" "$new" | grep -c . || true)
          fix_n=$(printf "%s\n" "$fix" | grep -c . || true)
          new_top=$(printf "%s\n" "$new" | head -n 5 | paste -sd, -)
          [[ -z "$new_top" ]] && new_top="_none_"

          {
            echo "### 🧾 Image diff"
            echo
            echo "**Repo:** ghcr.io/${{ github.repository }}"
            echo "**Base:** \`${{ env.BASE_IMAGE }}\` (digest: ${{ steps.meta.outputs.base_digest || 'n/a' }})"
            echo "**PR:** \`${{ env.PR_IMAGE }}\` (digest: ${{ steps.meta.outputs.pr_digest || 'n/a' }})"
            #echo "- Trivy CVEs: ${pr_set}"
            echo
            echo "- Created: ${{ steps.meta.outputs.base_created }} → ${{ steps.meta.outputs.pr_created }}"
            echo "- Size (compressed): ${base_h} → ${pr_h} (**${trend}**)"
            echo "- Layers: ${{ steps.meta.outputs.base_layers }} → ${{ steps.meta.outputs.pr_layers }}" # (**${layer_delta}**)
            echo "- Labels changed: ${{ steps.meta.outputs.labels_changed }}"
            echo "- Trivy HIGH/CRIT: +${new_n} / -${fix_n} (new: ${new_top})"
          } > comment.md

      - name: Sticky PR comment (update in-place)
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2
        with:
          path: comment.md
          skip_unchanged: true

      - name: Trivy REPORT (PR)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: image.tar
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: "${{ github.workspace }}/trivy-results.sarif"
          category: trivy

  test:
    runs-on: ubuntu-latest
    needs: build-bootc-image
    # only run if tagged for testing
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'e2e') }}
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    env:
      SSH_USERNAME: runner
      SSH_OPTIONS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5"
    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download PR image
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/image.tar
          key: ${{ runner.os }}-pr-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #- name: Maximize build space
      #  uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9

      - name: Load PR image
        shell: bash
        run: | #sh
          sudo podman load -q -i ${{ github.workspace }}/image.tar

      - name: Install deps (socat sqlite3 qemu-system-x86 qemu-utils)
        run: |
          set -e
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends -qq socat sqlite3 qemu-system-x86 qemu-utils

      - name: Generate ephemeral SSH keypair
        id: ssh-key
        run: | #sh
          set -e
          mkdir -p out
          ssh-keygen -t ed25519 -N "" -f out/ci_ssh_key
          echo "PUBKEY=$(cat out/ci_ssh_key.pub)" >> $GITHUB_ENV

          echo "ssh_key=./out/ci_ssh_key" >> $GITHUB_OUTPUT

      - name: Write bootc-image-builder user config (SSH access)
        run: | #sh
          set -e
          {
            echo '[[customizations.filesystem]]'
            echo 'mountpoint = "/tmp"'
            echo 'minsize   = "4 GiB"'
            echo '[[customizations.filesystem]]'
            echo 'mountpoint = "/"'
            echo 'minsize   = "8   GiB"'
            echo '[[customizations.user]]'
            echo "name = \"${{ env.SSH_USERNAME }}\""
            echo 'password = ""'
            echo "key = \"${PUBKEY}\""
            echo 'groups = ["wheel"]'
          } > out/config.toml

          cat ./out/config.toml

      - name: Configure Podman
        shell: bash
        run: | #sh
          sudo mkdir -p /etc/containers
          echo -e "[storage]\ndriver = \"overlay\"\nrunroot = \"/run/containers/storage\"\ngraphroot = \"/var/lib/containers/storage\"" \
            | sudo tee /etc/containers/storage.conf

          # workaround https://github.com/containers/podman/issues/21683
          echo "update DBConfig set GraphDriver = 'overlay' where GraphDriver = '';" | sudo sh -c '(cd /var/lib/containers/storage && sqlite3 db.sql)'

      # https://github.com/bootc-dev/bootc/blob/main/tests/build.sh
      - name: Build Bootable Image
        id: create-vmdk
        shell: bash
        env:
          CONFIG_FILE: ./out/config.toml
          IMAGE: ${{ env.PR_IMAGE }}
          BOOTC_IMAGE_BUILDER_IMAGE: quay.io/centos-bootc/bootc-image-builder:latest
          USE_LIBREPO: false
          IMAGE_TYPE: qcow2
          ROOTFS: xfs
        run: | #sh
          DESIRED_UID=$(id -u)
          DESIRED_GID=$(id -g)

          mkdir -p ./output

          INPUT_ARGS=""
          if [ "${USE_LIBREPO}" == "true" ]; then
              INPUT_ARGS+="--use-librepo=True "
          else
              INPUT_ARGS+="--use-librepo=False "
          fi

          sudo podman run \
            --rm \
            --privileged \
            --pull=newer \
            --security-opt label=type:unconfined_t \
            -v ${CONFIG_FILE}:/config.toml:ro \
            -v ./output:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            ${BOOTC_IMAGE_BUILDER_IMAGE} \
            --type ${IMAGE_TYPE} \
            --local \
            --chown $DESIRED_UID:$DESIRED_GID \
            ${INPUT_ARGS} \
            $IMAGE

          case "${IMAGE_TYPE}" in
          "raw"|"ami") OUTPUT_DIRECTORY="./output/image" ;;
          "iso") OUTPUT_DIRECTORY="./output/bootiso" ;;
          "vhd") OUTPUT_DIRECTORY="./output/vpc" ;;
          *) OUTPUT_DIRECTORY="./output/${IMAGE_TYPE}" ;;
          esac

          ISO_PATH=(${OUTPUT_DIRECTORY}/*)

          # Create a checksum of the output file, stored in the same directory
          CHECKSUM=$(sha256sum $ISO_PATH | awk '{print $1}')
          CHECKSUM_PATH=${ISO_PATH}-CHECKSUM
          echo $CHECKSUM > ${CHECKSUM_PATH}

          echo "output_directory=$OUTPUT_DIRECTORY" >> $GITHUB_OUTPUT
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "checksum_path=$CHECKSUM_PATH" >> $GITHUB_OUTPUT
          echo "path=$ISO_PATH" >> $GITHUB_OUTPUT

      - name: Boot QEMU (headless) with SSH forward
        env:
          DISK: ${{ steps.create-vmdk.outputs.path }}
        run: | #sh
          set -e
          sudo qemu-system-x86_64 \
            -name bootc-vm \
            -enable-kvm \
            -cpu host \
            -m 2G \
            -drive if=virtio,file="${DISK}",format=qcow2 \
            -net nic,model=virtio \
            -net user,hostfwd=tcp::2222-:22 \
            -display none \
            -monitor unix:/tmp/qemu-monitor-sock,server,nowait \
            -daemonize > out/qemu-console.log 2>&1

      - name: Wait for SSH
        env:
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
          SLEEP_SECONDS: 10
          RETRIES: 10
        run: | #sh
          # turn the env string into a Bash array
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"

          wait_for_ssh_up() {
            SSH_STATUS=$(ssh "${SSH_OPTS[@]}" -i "$SSH_KEY" -p 2222 ${SSH_USERNAME}@"${1}" '/bin/bash -c "echo -n READY"')
            if [[ $SSH_STATUS == "READY" ]]; then
              echo 1
            else
              echo 0
            fi
          }

          for _ in $(seq 0 ${RETRIES}); do
            RESULT=$(wait_for_ssh_up "localhost")
            if [[ $RESULT == 1 ]]; then
              echo "SSH is ready now! 🥳"
              break
            fi
            sleep ${SLEEP_SECONDS}
          done

          # Make sure VM is ready for testing
          echo "--- system is-running ---"
          ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost \
            "sudo bootc status"

          echo "--- system is-running ---"
          ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost \
            "rpm-ostree status"

          echo "--- system is-running ---"
          ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost \
            "systemctl is-system-running --wait"

          echo "--- stats ---"
          ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost \
            "df -h"

      - name: Basic health checks
        env:
          CORE_SERVICES: "sshd NetworkManager"
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
        run: | #sh
          # turn the env string into a Bash array
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          cat ./tests/healthcheck.sh | ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost

      - name: Verify ghcr auth
        env:
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
          IMAGE_FULL: ${{ env.IMAGE_FULL }}
        run: | #sh
          # turn the env string into a Bash array
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          cat ./tests/verify-cosign.sh | ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            "$SSH_USERNAME"@localhost \
              IMAGE_FULL="$IMAGE_FULL" \
              bash -s --

      # - name: /etc drift detector (fail on unexpected drift)
      #   env:
      #     SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
      #     SSH_USERNAME: ${{ env.SSH_USERNAME }}
      #     SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
      #     # Allow-list: expected first-boot changes under /etc (adjust as your image evolves)
      #     DRIFT_ALLOW_RE: "(^A\\s+/etc/ssh/ssh_host_.*|^A\\s+/etc/machine-id|^M\\s+/etc/issue.*|^A\\s+/etc/NetworkManager/system-connections/.*|^A\\s+/etc/resolv.conf)$"
      #   run: | #sh
      #     set -e
      #     # turn the env string into a Bash array
      #     read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
      #     ssh "${SSH_OPTS[@]}" \
      #       -i "$SSH_KEY" \
      #       -p 2222 \
      #       ${SSH_USERNAME}@localhost \
      #         'sudo ostree admin config-diff || true' | tee out/etc-drift.txt
      #     echo "---- Drift output ----"
      #     cat out/etc-drift.txt || true
      #     if grep -E '^[AMD]\s+/etc' out/etc-drift.txt | grep -Ev "${DRIFT_ALLOW_RE}" >/dev/null; then
      #       echo "::error::Unexpected /etc drift detected (see artifact)."
      #       exit 1
      #     fi

      - name: Collect logs and stop QEMU
        if: always()
        env:
          SSH_KEY: ${{ steps.ssh-key.outputs.ssh_key}}
          SSH_USERNAME: ${{ env.SSH_USERNAME }}
          SSH_OPTIONS: ${{ env.SSH_OPTIONS }}
        run: | #sh
          mkdir -p out/journal
          # Journal
          # turn the env string into a Bash array
          read -ra SSH_OPTS <<< "${{ env.SSH_OPTIONS }}"
          ssh "${SSH_OPTS[@]}" \
            -i "$SSH_KEY" \
            -p 2222 \
            ${SSH_USERNAME}@localhost \
              'sudo journalctl -b --no-pager -o short-precise | tail -n +1' > out/journal/boot.log || true
          # Stop QEMU
          echo quit | sudo socat - unix-connect:/tmp/qemu-monitor-sock

      - name: Publish Output to summary
        if: always()
        run: | #sh
          {
            echo "### QEMU Testing Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo "#### QEMU log"
            echo ""
            echo '```'
            cat out/qemu-console.log
            echo '```'
            echo ""
            echo "#### Journal"
            echo '```'
            cat out/journal/boot.log
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
